Procedural programming is about writing procedures or methods that perform operations on the data, while object-oriented programming is about creating objects that contain both data and methods.

Object-oriented programming has several advantages over procedural programming:

OOP is faster and easier to execute
OOP provides a clear structure for the programs
OOP helps to keep the Java code DRY "Don't Repeat Yourself", and makes the code easier to maintain, modify and debug
OOP makes it possible to create full reusable applications with less code and shorter development time
Tip: The "Don't Repeat Yourself" (DRY) principle is about reducing the repetition of code. You should extract out the codes that are common for the application, and place them at a single place and reuse them instead of repeating it.

Classes and objects are the two main aspects of object-oriented programming. 
A class is a template for objects, and an object is an instance of a class.
In java you can also override variables
public class Main {
  int x = 39;

  public static void main(String[] args) {
    Main myObj = new Main();
    myObj.x = 40;
    System.out.println(myObj.x);
  }
}
In this example the compiler prints out 40 instead of 39 and gets overrided. 
We are on constructors now (personally the most painful part understanding for me in c++ for some reason)
A constructor in Java is a special method that is used to initialize objects. 
The constructor is called when an object of a class is created. It can be used to set initial values for object attributes:

final:	Attributes and methods cannot be overridden/modified
static:	Attributes and methods belongs to the class, rather than an object
abstract:	Can only be used in an abstract class, and can only be used on methods. The method does not have a body, for example abstract void run();. The body is provided by the subclass (inherited from). You will learn more about inheritance and abstraction in the Inheritance and Abstraction chapters
transient:	Attributes and methods are skipped when serializing the object containing them
synchronized:	Methods can only be accessed by one thread at a time
volatile: The value of an attribute is not cached thread-locally, and is always read from the "main memory
When you assign final to a variable
It cannot be overrided
Why would you use encapsalation?
First of all it would be very useful in microsoft.
Better control of class attributes and methods
Class attributes can be made read-only (if you only use the get method), or write-only (if you only use the set method)
Flexible: the programmer can change one part of the code without affecting other parts
Increased security of data



Use import to import in libaries if ur too lazy to write the actual code. 
